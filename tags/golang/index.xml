<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on en1r0py</title><link>/tags/golang/</link><description>Recent content in Golang on en1r0py</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 27 Jan 2025 17:03:28 +0800</lastBuildDate><atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Codeql与Golang编译器</title><link>/posts/2025/codeql-and-the-go-compiler/</link><pubDate>Mon, 27 Jan 2025 17:03:28 +0800</pubDate><guid>/posts/2025/codeql-and-the-go-compiler/</guid><description>&lt;p>开始接触CodeQL时看到&lt;a href="https://github.blog/developer-skills/github/codeql-zero-to-hero-part-1-the-fundamentals-of-static-analysis-for-vulnerability-research/">CodeQL zero to hero part 1: The fundamentals of static analysis for vulnerability research&lt;/a>，当中提到许多的概念，例如AST(Abstract Syntax Tree)、CFG(Control Flow Graph)、SSA(Static Single Assignment)，用作提升代码审计的准确性与效率；在CodeQL文章中也提到上述概念都是参考编译器理论，本文章将通过Golang编译器说明上述概念，并比较CodeQL对应概念下的情况。&lt;/p></description><content>&lt;p>开始接触CodeQL时看到&lt;a href="https://github.blog/developer-skills/github/codeql-zero-to-hero-part-1-the-fundamentals-of-static-analysis-for-vulnerability-research/">CodeQL zero to hero part 1: The fundamentals of static analysis for vulnerability research&lt;/a>，当中提到许多的概念，例如AST(Abstract Syntax Tree)、CFG(Control Flow Graph)、SSA(Static Single Assignment)，用作提升代码审计的准确性与效率；在CodeQL文章中也提到上述概念都是参考编译器理论，本文章将通过Golang编译器说明上述概念，并比较CodeQL对应概念下的情况。&lt;/p>
&lt;h2 id="golang编译阶段">Golang编译阶段&lt;/h2>
&lt;p>编译器通常按以下几个阶段工作。而CodeQL主要参考编译器前端阶段
&lt;img src="/img/2025/codeql-and-the-go-compiler-1.jpg" alt="Compilation Process Phases" class="center" style="width:40%;" />
Golang编译器的前端阶段主要负责将源代码转换为中间代码(IR)，这一过程包括词法分析、语法分析、语义分析和生成中间代码。在1.4 版本开始，Golang实现了自举，前端代码逻辑主要在&lt;a href="https://github.com/golang/go/tree/master/src/cmd/compile/internal/syntax">cmd/compile/internal/syntax&lt;/a>目录下&lt;/p>
&lt;ol>
&lt;li>词法分析
&lt;ul>
&lt;li>词法分析阶段实现在&lt;a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/syntax/scanner.go">cmd/compile/internal/syntax/scanner.go&lt;/a>&lt;/li>
&lt;li>词法分析阶段将源代码字符串转换为一系列的Token。Golang编译器首先将标识符识别出来，然后再通过查表的方式挑出关键字。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>语法分析
&lt;ul>
&lt;li>语法分析阶段实现在&lt;a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/syntax/parser.go">cmd/compile/internal/syntax/parser.go&lt;/a>&lt;/li>
&lt;li>语法分析阶段将Token串转换成一个体现语法规则的树状数据结构，称为&lt;code>AST&lt;/code>。Golang编译器使用递归下降算法进行Token转化，并加上针对二元表达式的运算符优先级算法。&lt;/li>
&lt;li>Golang的AST节点定义在&lt;a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/syntax/nodes.go">cmd/compile/internal/syntax/nodes.go&lt;/a>&lt;/li>
&lt;li>Golang的规范中，每个语法单元都有EBNF格式的语法规则定义，可以参考：
&lt;ul>
&lt;li>&lt;a href="https://go.dev/ref/spec#Statements">Statements&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://go.dev/ref/spec">The Go Programming Language Specification&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>语义分析
&lt;ul>
&lt;li>语义分析阶段实现在&lt;a href="https://github.com/golang/go/tree/master/src/cmd/compile/internal/gc">cmd/compile/internal/gc&lt;/a>&lt;/li>
&lt;li>语义分析阶段主要进行上下文相关的分析，包括语义理解和语义检查。具体工作包括类型检查、名称消解(Name Resolution)和类型推导。&lt;/li>
&lt;li>Golang编译器在此阶段还会进行一些原本属于后端的优化，如AST变换，包括内联优化和逃逸分析。&lt;/li>
&lt;li>语义分析获得的一些信息(如引用消解信息、类型信息等)会附加到AST上，形成带有标注信息的AST(Annotated AST/Decorated AST)，用于更全面地反映源代码的含义。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>生产中间代码
&lt;ul>
&lt;li>中间代码(IR)，是处于源代码和目标代码之间的一种表示形式，Golang的IR使用&lt;code>SSA&lt;/code>格式表示&lt;/li>
&lt;li>Goang的IR是基于&lt;code>CGF&lt;/code>的。一个函数会被分成多个基本块，基本块中包含了一行行的指令。通过点击某个变量，可以查看它的定义和使用情况(def-use 链)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="astssacgf">AST、SSA、CGF&lt;/h2>
&lt;h3 id="ast">AST&lt;/h3>
&lt;p>AST 是源代码的语法结构的树状表示。它反映了源代码的语法结构，例如函数定义、变量声明、表达式等。AST的每个节点代表源代码中的一个语法单元，例如函数、语句、表达式等。AST的叶子节点通常是词法分析阶段生成的Token。&lt;/p>
&lt;ul>
&lt;li>函数定义：包括返回值类型、函数名称、参数列表和函数体。&lt;/li>
&lt;li>函数体：包含多个语句，如变量声明、赋值语句、条件语句、循环语句等。&lt;/li>
&lt;li>语句：可以进一步分解为更小的语法单元，直到叶子节点(Token)。&lt;/li>
&lt;/ul>
&lt;p>通过深度优先遍历AST，可以依次得到原来的Token，从而还原源代码的结构。&lt;/p>
&lt;h3 id="ssa">SSA&lt;/h3>
&lt;p>SSA是IR的一种形式，用于表示程序的中间状态。SSA的主要特点是每个变量只能被赋值一次，这使得程序的控制流和数据流更加清晰，便于进行各种优化。
&lt;a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/README.md">Go compiler&amp;rsquo;s SSA backend&lt;/a>里面介绍了Golang的SSA的几个主要概念&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/ssa/value.go">Value&lt;/a>：SSA的最主要构造单元，可以定义一次、使用多次。定义一个 Value 时，需要一个标识符(ID)、操作码(&lt;a href="https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/ssa/op.go">Op&lt;/a>)、类型(&lt;a href="https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/types/type.go">Type&lt;/a>)和一些辅助信息(AuxInt和Aux)。&lt;/li>
&lt;li>&lt;a href="https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/ssa/block.go">Block&lt;/a>：Golang编译器中的Block有三种：
&lt;ul>
&lt;li>简单(Plain)基本块：只有一个后继基本块。&lt;/li>
&lt;li>退出(Exit)基本块：最后一个指令是返回指令。&lt;/li>
&lt;li>if基本块：有一个控制值，根据该值是 true 还是 false，跳转到不同的基本块。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/ssa/func.go">Func&lt;/a>：由多个Block构成，必须有一个入口基本块(Entry Block)，但可以有 0 到多个退出基本块。&lt;/li>
&lt;/ol>
&lt;h3 id="cfg">CFG&lt;/h3>
&lt;p>CFG是程序执行路径的图形表示。CFG中每个节点对应一个Block，节点之间的边表示控制流的转移。&lt;/p>
&lt;h2 id="与codeql关联">与CodeQL关联&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;database/sql&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/go-sql-driver/mysql&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">DB&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">injectHandler&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// source
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">host&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;host&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// sink
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;select User from user where Host = &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">host&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#39;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Panic&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Scan&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Panic&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#a6e22e">user&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">setupRouter&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Engine&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Default&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/inject&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">injectHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">router&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;mysql&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;root:weakPassword@tcp(localhost:3306)/mysql&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Ping&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">setupRouter&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Listen and Server in 0.0.0.0:8080
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8080&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上述包含sql injection的代码作为案例，比较Golang的AST与CodeQL AST可以有个直观的感受。
Golang可以使用下述命令，打印出为&lt;code>injectHandler&lt;/code>函数从源代码到生成IR之间的产物。在当前目录下能看到一个ssa.html文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>GOSSAFUNC&lt;span style="color:#f92672">=&lt;/span>injectHandler go build -gcflags &lt;span style="color:#e6db74">&amp;#39;-S&amp;#39;&lt;/span> gin-sqli.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="/img/2025/codeql-and-the-go-compiler-2.jpg" alt="Golag SSA.html" class="left" style="width:100%;" />
&lt;p>通过VSCode产生CodeQL的AST
&lt;img src="/img/2025/codeql-and-the-go-compiler-3.jpg" alt="CodeQL AST" class="left" style="width:100%;" />
&lt;/p>
&lt;p>两者在表述AST的结构上还是有很大的差异，但目的都是表述语法规则的树状数据结构。&lt;/p></content></item></channel></rss>